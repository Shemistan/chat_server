// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Shemistan/chat_server/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// Chat is an autogenerated mock type for the Chat type
type Chat struct {
	mock.Mock
}

// AddMessage provides a mock function with given fields: ctx, req
func (_m *Chat) AddMessage(ctx context.Context, req model.Message) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for AddMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Message) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateChat provides a mock function with given fields: ctx, req
func (_m *Chat) CreateChat(ctx context.Context, req model.Chat) (int64, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateChat")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Chat) (int64, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Chat) int64); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Chat) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateChat provides a mock function with given fields: ctx, chatID
func (_m *Chat) DeactivateChat(ctx context.Context, chatID int64) error {
	ret := _m.Called(ctx, chatID)

	if len(ret) == 0 {
		panic("no return value specified for DeactivateChat")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, chatID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewChat creates a new instance of Chat. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChat(t interface {
	mock.TestingT
	Cleanup(func())
}) *Chat {
	mock := &Chat{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
